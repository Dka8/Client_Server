Тестовое задание для ООО Научно-Технический Центр ПРОТЕЙ
на должность: Junior C++ developer (разработчик C++) 
выполнил: Юшков Иван

Тестовое задание:
			Необходимо написать две программы, клиент и сервер. Сервер принимает 
			сообщения от клиента по протоколам UDP и TCP и отправляет их обратно 
			клиенту, т.е. работает в режиме эха. Клиент читает сообщения 
			произвольной длины с консоли и отправляет их на сервер. Протокол, по 
			которому отправляет сообщения клиент, указывается при его запуске.

			Размер сообщения не фиксированный, но не более 65 кб. Важно, чтобы 
			объем передаваемых по сети данных был минимально необходимым.

			Задание должно быть выполнено на языке С++ (уместное применение 
			ООП/STL приветствуется), с использованием Berkeley Sockets для работы с 
			сетью.
			Применение библиотек и фреймвоков наподобие Qt или boost для работы с 
			сетью при выполнении задания не допускается.

			Простое дополнение к работе сервера (помимо эхо-функции при 
			реализации максимально возможно использовать STL):
				- во входном сообщении найти вхождения всех чисел от 0 до 9 и 
				вывести на консоль:
					* их сумму;
					* все числа, в порядке убывания;
					* максимальное и минимальное значения.
-----------------------------------------------------------------------------------------------------					
В результа выполнения задания было создан проект Client_server, в который входят следующие компоненты,
3 библиотеки и 2 исполняемых файла:
	1 — Network_lib - 	предназначена для работы с сетью и является ОПП оберткой
						Berkeley Sockets.
		Состоит из следующих заголовочных файлов:
		1) Config.h - 			на данный момент только определяет версию Windows для 
								корректной работы системных библиотек
		2) IpAddress.h -		класс для работы с IPv4
		3) SafeTypes.h - 		определ¤ем безопасные типы, которые можно безопасно передавать по сети
		4) SocketHandle.h - 	описывает какое внутреннее обозначение сокета в системе используется
		5) Socket.h - 			класс, описывающий протоколонезависимые методы работы с сокетами
		6) TcpSocket.h -		класс, описывает специфические методы, применимые при использовании
								сокетов по протоколу Tcp
		7) UdpSocket.h - 		класс, описывает специфические методы, применимые при использовании
								сокетов по протоколу Udp
								
	2 — Server_lib - 	предназначена для осуществления функциональности сервера в пределах
						тестового задания (режим эха, обработка входящей строки)
	3 — Client_lib -	предназначена для осуществления функциональности сервера в пределах
						тестового задания (выбор протокола передачи данных при запуске,
						принятие пользовательной строки, ожидание ответа сервера и эго отображение)
		Состоит из следующих заголовочных файлов:
		1) Client.h - 		класс интерфейс, описывает общие методы работы клиента
		2) ClientTCP.h -	объект данного типо создается при использование User Datagram Protocol
							для связи с сервером
		3) ClientUDP.h -	объект данного типо создается при использование Transmission Control Protocol
							для связи с сервером
-----------------------------------------------------------------------------------------------------
Исполнительные файлы Client_main.exe и Server_main.exe создаются на основе Client_main.cpp и Server_main.cpp
соответственно.
Исполнительные файлы находятся в корневой директории проекта Client_Server
-----------------------------------------------------------------------------------------------------
Сборка осуществляется с помощью CMake, файл CMakeLists.txt находится в корневой директории проекта
-----------------------------------------------------------------------------------------------------
Замечания по дальнейшему совершенствованию проекта:
	1.	Использовать мультипоточность на стороне как сервера, так и клиента,
		для распаралеливания разных протокол связи и выделить отдельный поток для консольных комманд (exit и т.п.)
	2.	Функции обработки входящей строки на стороне сервера выделить в отдельный функционал.
	3. 	Разгрузить Client_main.cpp, написать отдельный класс, для работы со входящей
		от пользователя информацией.